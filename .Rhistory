var = n* p * (1-p)
print(var)
interval = 1.96 * stand.dev
print(interval)
p = 1/6
n = 200
mean = n * p
print(mean)
var = n* p * (1-p)
print(var)
stand.dev = sqrt(var)
print(stand.dev)
#1d
interval = 1.96 * stand.dev
print(interval)
majority1 = mean + interval
print(majority1)
majority2 = mean - interval
print(majority2)
sum(dbinom(23:43, 200, 1/6))
sum(dbinom(23:44, 200, 1/6))
p = 1/6
n = 2000
mean = n * p
print(mean)
var = n* p * (1-p)
print(var)
stand.dev = sqrt(var)
print(stand.dev)
interval = 1.96 * stand.dev
print(interval)
majority1 = mean + interval
print(majority1)
majority2 = mean - interval
print(majority2)
#2a
sum(dbinom(300:366, 2000, 1/6))
#2a
prob.none.sick=1-dbinom(10, 10, .99)
print(prob.none.sick)
prob.none.sick= dbinom(10, 10, .99)
print(prob.none.sick)
prob.one.sick = 1 - prob.none.sick
print(prob.one.sick)
prob.none.sick= dbinom(10, 10, .999)
print(prob.none.sick)
prob.one.sick = 1 - prob.none.sick
print(prob.one.sick)
.01*.001
.000001
.00001
.01^2
.001/.01
6*.03
30*.03
.9+.99
sqrt(4.9)
(sqrt(49/40)) * 2
sqrt(49/40)
sqrt(4.9)/2
7/(sqrt(10))
sum(dbinom(5902800:5997200, 100000000, 0.05953763))
.9404*(5.95^2)
94.05^2
8845.403*.0595
sqrt(559.59)
559.59*1000000
23600*1.96
559590000-46256
559590000+46256
sum(dbinom(559636256:559543744, 100000000, 0.05953763))
sum(dbinom(559543744:559636256, 100000000, 0.05953763))
sum(dbinom(5902800:5997200, 100000000, 0.05953763))
dbinom(5902800, 100000000, 0.05953763)
dbinom(559590000, 100000000, 0.05953763)
5950000-46256
5950000+46256
sum(dbinom(5903744:5996256, 100000000, 0.05953763))
sum(dbinom(5903744:5996256, 100000000, 0.05953763))
5950000-46200
5950000+46200
sum(dbinom(5903800:5996200, 100000000, 0.05953763))
prob=dbinom(0:1000000, 1000000, 0.05953763)
plot(prob)
dnorm(2)
dnorm(1.5)
dnorm(1.75) * .5
pnorm(1.96)
pnorm(1.96)-pnorm(-1.96)
?pnorm
pnorm(1.2)-pnorm(0.8)
print(pnorm(1.2)-pnorm(0.8))
dnorm(0.8)*0.4
dnorm(0.8)
dnorm(0.8)*0.4
print(dnorm(0.8)*0.4)
dnorm(0.9)*0.2
dnorm(1.1)*0.2
dnorm(0.9)*0.2 + dnorm(1.1)*0.2
print(pnorm(1.2)-pnorm(0.8))
dnorm(0.85)*0.1 + dnorm(0.95)*0.1 + dnorm(1.05)*0.1 + dnorm(1.15)*0.1
plot(dnorm(150:450, 300, sqrt(210)))
10999-109999
2 * 99399
198798/(10999*0.1)
(180.7419)^2
p = sum(dbinom(80:120, 600, 1/6))
print(p)
plot(dbinom(0:600, 600, 1/6))
plot(dbinom(600, 600, 1/6))
plot(dbinom(80, 600, 1/6))
plot(dbinom(120, 600, 1/6))
plot(dbinom(80:120, 600, 1/6))
plot(dbinom(0:600, 600, 1/6))
dnom
?dnom()
?dnom()
?dnorm()
mean(dbinom(80:120, 600, 1/6))
mean(dbinom(0:600, 600, 1/6))
?mean()
plot(dbinom(0:600, 600, 1/6))
?dnorm()
?dbinom()
plot(dbinom(6, 600, 1/6))
plot(dbinom(6, 0:600, 1/6))
?dnorm()
plot(dbinom(6, 0:600, 1/6))
plot(dbinom(0:600, 600, 1/6))
?var()
600*5
3000/6
3000/36
500/6
pnorm((280-300)/sqrt(210))
pnorm((280-300)/sqrt(210)) - pnorm((250-300)/sqrt(210))
pnorm((280-300)/sqrt(210)) - pnorm((280-300)/sqrt(210))
?pnorm()
pnorm(280, 300, sqrt(210)) - pnorm (250, 300, sqrt(210))
plot(dnorm(0:600, 100, sqrt(500/6)))
plot(dbinom(0:600, 600, 1/6))
plot(dnorm(0:600, 100, sqrt(500/6)))
plot(dbinom(0:600, 600, 1/6))
plot(dnorm(0:600, 100, sqrt(500/6)))
60
plot(dbinom(0:60, 600, 1/6))
plot(dbinom(0:60, 60, 1/6))
plot(dnorm(0:60, 10, sqrt(50/6)))
plot(dnorm(0:6, 1, sqrt(5/6)))
plot(dbinom(0:6, 6, 1/6))
plot(dbinom(0:60, 60, 1/6))
plot(dnorm(0:60, 10, sqrt(50/6)))
plot(dbinom(0:6, 6, 1/6))
plot(dnorm(0:6, 1, sqrt(5/6)))
plot(dnorm(0:600, 100, sqrt(500/6)))
plot(dbinom(0:60, 60, 1/6))
plot(dnorm(0:60, 10, sqrt(50/6)))
plot(dbinom(0:6, 6, 1/6))
plot(dnorm(0:6, 1, sqrt(5/6)))
pnorm()
110*.88
110*.8
100^2
sqrt(2080)
sqrt(20.8)*10
100000*100
10000000
100000^2
1000000000
10000000000
100000*sqrt(20.8)
100000*sqrt(2080)
1000*sqrt(2080)
sqrt(2080*1000)
print(pnorm(1.2)-pnorm(0.8))
#1(b)
print(dnorm(1)*0.4)
#1(c)
print(dnorm(0.9)*0.2 + dnorm(1.1)*0.2)
#1(d)
dnorm(0.85)*0.1 + dnorm(0.95)*0.1 + dnorm(1.05)*0.1 + dnorm(1.15)*0.1
pnorm(-4.35)
pnorm(1-4.35)
1-pnorm(4.35)
1-pnorm(81,50,6.89)
1-pnorm(80,50,6.89)
sum(dbinom(81:100, 1000, 0.05))
2.04874e-05 * -100000
6/13.5
qnorm(.1)
177.8+7.6
177.8-7.6
qnorm(1/6)
7.6/.97
7.86*2
1-pnorm(190.5,177.8,7.86)
sum(dbinom(80:1000, 1000, 0.05))
sum(dbinom(81:1000, 1000, 0.05))
2*10^3
2*10^5
2*10^4
sum(dbinom(81:85, 1000, 0.05))
sum(dbinom(5:50, 1000, 0.05))
sum(dbinom(50, 1000, 0.05))
sum(dbinom(1, 1000, 0.05))
sum(dbinom(40, 1000, 0.05))
sum(dbinom(40:60, 1000, 0.05))
pnorm(-4.35)
0.44*0.56
((0.44*0.56)/sqrt(136000)) *1.96
(sqrt(0.44*0.56)/sqrt(136000)) *1.96
qnorm(.05)
qnorm(.025)
(sqrt(0.44*0.56)/sqrt(136000))
(sqrt(0.44*0.56)/sqrt(13600)) *1.96
((0.44*0.56)/sqrt(13600)) *1.96
2 * pnorm(-3.05)
9.3147/7.022
pt(-1.568, 98)
10.527*0.3544
5.3036/2.5316
8.438 * 0.1960
trump = 400 * .25
trump
carson = 400 * .22
carson
rubio = 400 * .13
rubio
sqrt((25*75/400) + (22*78/400))
3/2.996248
2 * pnorm(-1.001252)
sqrt((25*75/400)+(13*87/400))
12/2.74135
2*pnorm(-4.377)
20/117025
40/113972
1-20/117025
1-40/113972
(sqrt(0.44*0.56)/sqrt(13600)) *1.96
((0.44*0.56)/sqrt(13600)) *1.96
sqrt(((0.44*0.56))/sqrt(13600))
sqrt(((0.44*0.56))/sqrt(13600)) * 1.96
1.96 * sqrt((20/117025 * (1-20/117025)))/sqrt(117025)
1.96 * sqrt((40/113972 * (1-40/113972 )))/sqrt(113972)
qnorm(.025)
1.28 * sqrt((20/117025 * (1-20/117025)))/sqrt(117025)
1.28 * sqrt((40/113972 * (1-40/113972 )))/sqrt(113972)
sqrt((20/117025 * (1-20/117025)))/sqrt(117025)
sqrt((40/113972 * (1-40/113972 )))/sqrt(113972)
(sqrt((20/117025 * (1-20/117025)))/sqrt(117025))^2 +(sqrt((40/113972 * (1-40/113972 )))/sqrt(113972))^2
sqrt((sqrt((20/117025 * (1-20/117025)))/sqrt(117025))^2 +(sqrt((40/113972 * (1-40/113972 )))/sqrt(113972))^2)
(20/117025) - (40/113972)
((20/117025) - (40/113972))/sqrt((sqrt((20/117025 * (1-20/117025)))/sqrt(117025))^2 +(sqrt((40/113972 * (1-40/113972 )))/sqrt(113972))^2)
2 * pnorm(-2.67)
qnorm(1/6)
7.6/0.967
1/250
249/250
(.995 * .004)/(.995*.004)+(.001*.996)
(.995 * .004)/((.995*.004)+(.001*.996))
1/1000
999/1000
(.995*.001)/((.995*.001)+(.001*.999))
pnorm(-4.65)
pnorm(-4.35)
(81-50)/6.89
pnorm(-4.499)
-2.05 + (.9999966*105000)
.9999966*105000
for(n=100:105){
print(n);
print(sum(dbinom(100:n,n,0.99)))
for(n in 100:105){
print(n);
print(sum(dbinom(100:n,n,0.99)))
}
pt()
var(192/200)
var(192)/200
192/6
?var
var(192)
var(13,25,24)
g = c(192)
var(g)
g = c(192,134,41)
var(g)
dbinom(100,100,.99)
for(n in 100:105){
print(n);
print(sum(dbinom(100:n,n,0.99)))
}
100^2
100^2*100
(.9999*1/38)/((.9999*1/38)*(1/38)+(.05*37/38)*(37/38))
(.9999*1/14)/((.9999*1/14)*(1/14)+(.05*13/14)*(13/14))
((.9999*1/38)*(1/38))/((.9999*1/38)*+(.05*37/38))
((.9999*1/14)*(1/14))/((.9999*1/14)+(.05*13/14))
(.9999*1/38)*(1/38)/((.9999*1/38)*(1/38)+(.05*37/38)*(37/38))
(.9999*1/14)*(1/14)/((.9999*1/14)*(1/14)+(.05*13/14)*(13/14))
dbinom(1000,1000,.95)
dbinom(1100,1000,.95)
sum(dbinom(1000:1100,1000,.95))
dbinom(1100,1100,.95)
.3*.7
.21/100
.16/100
0.0016 +  0.0021
sqrt(.0037)
.1/.06
2*pnorm(-1.666667)
6.3147/3.022
pt(3.022,128)
pt(-3.022,128)
2*pt(-3.022,128)
qt(.01,128)
qt(.025,98)
qt(.01, 99)
2.36*.6
(.9999*1/38)/((.9999*1/38)+(.05*37/38))
(.9999*1/14)/((.9999*1/14)+(.05*13/14))
.95*1100
1100*.95*.05
sqrt(1100*.95*.05)
-45/7.22
pnrom(-6.23)
pnorm(-6.23)
-45/7.228416
pnorm(-6.22543)
1100-1045
-55/7.22
pnorm(-7.617729)
pnorm(0)
1100*.05*.95
sqrt(52.25)
.95*110
.95*1100
for(n in 100:105){
print(n);
print(sum(dbinom(100:n,n,0.99)))
}
#test
dbinom(1000,1100,.95)
-45/7.228416
pnorm(-6.22543)
2*pnorm(-6.22543)
dbinom(0:99, 1100, .95)
sum(dbinom(0:99, 1100, .95))
sum(dbinom(0:999, 1100, .95))
-45/7.228416
1-(pnorm(-6.22543))
pnorm(-6.22543)
.05*1100
sum(dbinom(0:999,1000,.95))
sum(dbinom(0:999,1100,.95))
sum(dbinom(0:999,1050,.95))
sum(dbinom(0:999,1060,.95))
sum(dbinom(0:999,1080,.95))
sum(dbinom(0:999,1075,.95))
sum(dbinom(0:999,1070,.95))
sum(dbinom(0:999,1069,.95))
sum(dbinom(0:999,1071,.95))
999-55/7.22
pnorm(-991)
-5/7.22
pnrom(-.6925)
pnorm(-.6925)
55/7.2
pnorm(-7.63889)
dbinom(0:999,1100,.95)
sum(dbinom(0:999,1100,.95))
pnorm(-7.63889)
0.01*1100
11-55
-44/7.22
pnorm(-6.094183)
1-pnorm(-6.094183)
1-pnorm(6.094183)
pnorm(6.094183)
.5-pnorm(6.094183)
install.packages("glmnet")
library(glmnet)
library(glmnet)
set.seed(19874)
n <- 1000
p <-
quit()
library(glmnet)
library(glmnet)
library(glmnet)
# Generate artificial data of the form
# y=x1+x2+x3+...+x15+0*x16+...+0*x200+\epsilon
set.seed(19874)
n <- 1000    # Number of observations
p <- 200    # Number of predictors included in model
real_p <- 15  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
print(set.seed(19874))
print(n)
# Generate artificial data of the form
# y=x1+x2+x3+...+x15+0*x16+...+0*x200+\epsilon
set.seed(19874)
n <- 20   # Number of observations
p <- 200    # Number of predictors included in model
real_p <- 15  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
print(x)
reg=lm(y~x)
summary(reg)
n <- 20   # Number of observations
p <- 5    # Number of predictors included in model
real_p <- 2  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# sums all numbers for significant vars per row + rnorm(n), which adds some noise
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
#naive approach - run OLS
reg=lm(y~x)
summary(reg)
set.seed(1975)
n <- 20   # Number of observations
p <- 5    # Number of predictors included in model
real_p <- 2  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# sums all numbers for significant vars per row + rnorm(n), which adds some noise
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
#naive approach - run OLS
reg=lm(y~x)
summary(reg)
set.seed(1975)
n <- 2000   # Number of observations
p <- 5    # Number of predictors included in model
real_p <- 2  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
# sums all numbers for significant vars per row + rnorm(n), which adds some noise
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
#naive approach - run OLS
reg=lm(y~x)
summary(reg)
reg.reduced=lm(y~x[,1:2])
summary(reg.reduced)
anova(reg, reg.reduced)
set.seed(19874)
n <- 1000    # Number of observations
p <- 200    # Number of predictors included in model
real_p <- 15  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
#naive approach - run OLS
reg=lm(y~x)
summary(reg)
#estimate this model through LASSO, choose optimal penalty parameter based on cross-validation
cvfit = cv.glmnet(x, y)
coef(cvfit, s = "lambda.1se")
reg.reduced=lm(y~x[,1:15])
summary(reg.reduced)
anova(reg, reg.reduced)
set.seed(1971)
n <- 1000    # Number of observations
p <- 200    # Number of predictors included in model
real_p <- 15  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
#naive approach - run OLS
reg=lm(y~x)
summary(reg)
#estimate this model through LASSO, choose optimal penalty parameter based on cross-validation
cvfit = cv.glmnet(x, y)
coef(cvfit, s = "lambda.1se")
reg.reduced=lm(y~x[,1:15])
summary(reg.reduced)
anova(reg, reg.reduced)
set.seed(1975)
n <- 1000    # Number of observations
p <- 200    # Number of predictors included in model
real_p <- 15  # Number of true predictors
x <- matrix(rnorm(n*p), nrow=n, ncol=p)
y <- apply(x[,1:real_p], 1, sum) + rnorm(n)
cvfit = cv.glmnet(x, y)
coef(cvfit, s = "lambda.1se")
plot(cvfit)
exp(1)
setwd("~/Desktop/women_in_politics")
women_with_regions = read.csv('final_wRegions.csv')
with_regions.lm(GenderVar~PercentWomen+PartyVar, data=women)
View(women_with_regions)
head(women_with_regions)
women_with_regions = read.csv('final_wRegions.csv')
with_regions.lm = lm(GenderVar~PercentWomen+PartyVar+X_regNewEngland+X_regMidAtlantic+regENCentral+X_regWNCentral
+X_regSouthAtlantic+X_regESCentral+X_regWSCentral+X_regMountainWest+X_regPacific, data=women)
summary(with_regions.lm)
setwd("~/Desktop/women_in_politics")
women_with_regions = read.csv('final_wRegions.csv')
with_regions.lm = lm(GenderVar~PercentWomen+PartyVar+X_regNewEngland+X_regMidAtlantic+regENCentral+X_regWNCentral
+X_regSouthAtlantic+X_regESCentral+X_regWSCentral+X_regMountainWest+X_regPacific, data=women)
summary(with_regions.lm)
setwd("~/Desktop/women_in_politics")
women_with_regions = read.csv('final_wRegions.csv')
with_regions.lm = lm(GenderVar~PercentWomen+PartyVar+X_regNewEngland+X_regMidAtlantic+regENCentral+X_regWNCentral
+X_regSouthAtlantic+X_regESCentral+X_regWSCentral+X_regMountainWest+X_regPacific, data=women)
View(women_with_regions)
View(women_with_regions)
women_with_regions = read.csv('final_wRegions.csv')
with_regions.lm = lm(GenderVar~PercentWomen+PartyVar+X_regNewEngland+X_regMidAtlantic+regENCentral+X_regWNCentral
+X_regSouthAtlantic+X_regESCentral+X_regWSCentral+X_regMountainWest+X_regPacific,
data=women_with_regions)
women_with_regions = read.csv('final_wRegions.csv')
with_regions.lm = lm(GenderVar~PercentWomen+PartyVar+X_regNewEngland+X_regMidAtlantic+X_regENCentral+X_regWNCentral
+X_regSouthAtlantic+X_regESCentral+X_regWSCentral+X_regMountainWest+X_regPacific,
data=women_with_regions)
summary(with_regions.lm)
